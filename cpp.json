{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"main fanction" : {
		"prefix": "m",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define REP(i,n) for (int i = 0; i < (n); ++i)",
			"template<class T> inline bool chmin(T& a, T b) {if (a > b) {a = b;return true;}return false;}",
			"template<class T> inline bool chmax(T& a, T b) {if (a < b) {a = b;return true;}return false;}",
			"using ll = long long;",
			"using P = pair<int,int>;",
			"using Pl = pair<long long,long long>;",
			"using veci = vector<int>;",
			"using vecl = vector<long long>;",
			"using vecveci = vector<vector<int>>;",
			"using vecvecl = vector<vector<long long>>;",
			"const int MOD = 1000000007;",
			"const double pi = acos(-1);",
			"ll gcd(ll a, ll b) {if(b == 0) return a; else return gcd(b,a%b);}",
			"ll lcm(ll a, ll b) {return a*b/gcd(a,b);}",
			"",
			"template<int MOD> struct Fp {",
			"	long long val;",
			"	constexpr Fp(long long v = 0) noexcept : val(v % MOD) {if (val < 0) val += MOD;}",
				"	constexpr int getmod() { return MOD; }",
				"	constexpr Fp operator - () const noexcept {return val ? MOD - val : 0;}",
				"	constexpr Fp operator + (const Fp& r) const noexcept { return Fp(*this) += r; }",
				"	constexpr Fp operator - (const Fp& r) const noexcept { return Fp(*this) -= r; }",
				"	constexpr Fp operator * (const Fp& r) const noexcept { return Fp(*this) *= r; }",
				"	constexpr Fp operator / (const Fp& r) const noexcept { return Fp(*this) /= r; }",
				"	constexpr Fp& operator += (const Fp& r) noexcept {val += r.val;if (val >= MOD) val -= MOD;return *this;}",
				"	constexpr Fp& operator -= (const Fp& r) noexcept {val -= r.val;if (val < 0) val += MOD;return *this;}",
				"	constexpr Fp& operator *= (const Fp& r) noexcept {val = val * r.val % MOD;return *this;}",
				"	constexpr Fp& operator /= (const Fp& r) noexcept {long long a = r.val, b = MOD, u = 1, v = 0;while (b) {long long t = a / b;a -= t * b; swap(a, b);u -= t * v; swap(u, v);}val = val * u % MOD;if (val < 0) val += MOD;return *this;}",
				"	constexpr bool operator == (const Fp& r) const noexcept {return this->val == r.val;}",
				"	constexpr bool operator != (const Fp& r) const noexcept {return this->val != r.val;}",
				"	friend constexpr ostream& operator << (ostream &os, const Fp<MOD>& x) noexcept {return os << x.val;}",
				"	friend constexpr Fp<MOD> modpow(const Fp<MOD> &a, long long n) noexcept {if (n == 0) return 1;auto t = modpow(a, n / 2);t = t * t;if (n & 1) t = t * a;return t;}",
			"};",
			"",
			"using mint = Fp<MOD>;",
			"",
			"int main() {",
			"	return 0;",
			"}"
		],
		"description": "テンプレートを書くよ"
	}

	"tsort" : {
		"prefix": "tsort",
		"body": [
			"void tsort(veci &ans, int V, vecveci &G) {",
			"	queue<int> S;",
			"	vector<int> Degree(V);",
			"",
			"	for(int i = 0; i < V; i++) {",
			"		for(int v : G[i]) Degree[v]++;",
			"	}",
			"",
			"	for(int i = 0; i < V; i++) {",
			"		if(Degree[i] == 0) S.push(i);",
			"	}",
			"",
			"	while(!S.empty()) {",
			"		int v = S.front();",
			"		S.pop();",
			"",
			"		for(int nv : G[v]) {",
			"			Degree[nv]--;",
			"			if(Degree[nv] == 0) S.push(nv);",
			"		}",
			"",
			"		ans.push_back(v);",
			"	}",
			"}"
		],
		"description": "グラフGのトポロジカルソートを求めるよ"
	}

	"nCrmod" : {
		"prefix": "nCrmod",
		"body": [
			"const int MAX = 510000;",
"",
			"long long fac[MAX], finv[MAX], inv[MAX];",
			"",
			"// テーブルを作る前処理",
			"void COMinit() {",
			"	fac[0] = fac[1] = 1;",
			"	finv[0] = finv[1] = 1;",
			"	inv[1] = 1;",
			"	for (int i = 2; i < MAX; i++){",
			"		fac[i] = fac[i - 1] * i % MOD;",
			"		inv[i] = MOD - inv[MOD%i] * (MOD / i) % MOD;",
			"		finv[i] = finv[i - 1] * inv[i] % MOD;",
			"	}",
			"}",
			"",		
			"// 二項係数計算"
			"long long COM(int n, int k){",
			"	if (n < k) return 0;",
			"	if (n < 0 || k < 0) return 0;",
			"	return fac[n] * (finv[k] * finv[n - k] % MOD) % MOD;",
			"}"
		],
		"description": "nCr(mod 1000000007)を計算できます"
	}
}
